<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nyaplot | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/nyaplot/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2014-08-23T18:10:42-04:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Nyaplot internal event handler]]></title>
    <link href="http://sciruby.com/blog/2014/07/09/nyaplot-internal-event-handler/"/>
    <updated>2014-07-09T17:01:00-04:00</updated>
    <id>http://sciruby.com/blog/2014/07/09/nyaplot-internal-event-handler</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/multiple_panes.png" alt="Nyaplot multi-pane example" /></p>

<h2>Introduction</h2>

<p>Last week I implemented the multiple panes interactivity to the
front-end of Nyaplot. You can see the demo on <a href="http://nbviewer.ipython.org/github/domitry/Nyaplot/blob/master/examples/notebook/Introduction.ipynb">this notebook</a>.</p>

<p>Skip over single pane demo, and have a look at the paragraph 'Multiple
panes demo' at the bottom. In this example, the histogram and bar chart are
created individually, and then thrown into one instance of
Nyaplot::Frame. After running <code>frame.show</code>, both of the diagrams
appear in one out-put box on the notebook. When you click the
histogram, bar chart refrects that and change its height.</p>

<p>In this article I will explain about the event handler of Nyaplot,
which allows for interactivity among panes.</p>

<h2>The Trick</h2>

<p>The trick is actually hidden in Nyaplot::DataFrame. In this example,
both of the two diagrams are generated from columns in one DataFrame.
When Nyaplot receives a column object (instance of <code>Nyaplot::Series</code>,
defined
<a href="https://github.com/domitry/nyaplot/blob/93ee183b935a7deafa388f2a198792e86914d550/lib/nyaplot/data.rb#L130">here</a>), it
internally find its source data frame and remembers its location.</p>

<p>Consequently, Nyaplot can find that histogram and bar chart are
sharing their data source, and allows them to interact with each other.</p>

<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/table.png" alt="Nyaplot::DataFrame Example" /></p>

<h2>Implementation</h2>

<p>Before explaining the event handler, I want to outline Nyaplot's
diagram rendering procedure. In the back-end JavaScript library,
diagrams, such as histograms, fetch column data from data frames and generate
their SVG DOM nodes dynamically (<a href="https://github.com/domitry/Nyaplotjs/blob/0aa104aed467f39da89ba3ed72be5f159a0261b8/src/view/diagrams/histogram.js#L20">source code</a>).</p>

<p>The key is <a href="https://github.com/domitry/Nyaplotjs/blob/0aa104aed467f39da89ba3ed72be5f159a0261b8/src/utils/dataframe.js">a data frame written in JavaScript</a>. After mouse events
coming from a filter (such as the gray box on the plot area) are
handled, the histogram <a href="https://github.com/domitry/Nyaplotjs/blob/0aa104aed467f39da89ba3ed72be5f159a0261b8/src/view/diagrams/histogram.js#L96">registers its filter function to the data frame and instructs all diagrams to update their SVG DOM objects</a>. The bar chart <a href="https://github.com/domitry/Nyaplotjs/blob/0aa104aed467f39da89ba3ed72be5f159a0261b8/src/view/diagrams/bar.js#L54">updates its SVG from data filtered by the new function</a>.</p>

<p>As you can see, Nyaplot's inner workings are fairly simple; and these
workings are common to all diagrams supported by Nyaplot. So not only
the histogram and bar chart, but other diagrams as well, can behave
interactively (e.g., <a href="http://www.domitry.com/gsoc/multi_pane2.html">histogram, bar, and Venn example</a>).</p>

<h2>Conclusion</h2>

<p>Despite, or perhaps because of, the relative simplicity of the
structure, the event handler functions well. The actual interactivity
in Nyaplot is based on the data frame object, both in the
Ruby front-end and the JavaScript back-end. As a result, handling
events in DataFrame is both natural and efficient for Nyaplot.</p>

<h2>Additional Information</h2>

<p>Nyaplot and its back-end library Nyaplotjs are being developed on GitHub.</p>

<ul>
<li><a href="https://github.com/domitry/nyaplot">Nyaplot on GitHub</a></li>
<li><a href="https://github.com/domitry/Nyaplotjs">Nyaplotjs on GitHub</a></li>
</ul>


<p>If you are interesed, feel free to try it and raise issues or send pull-requests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The progress of the GSoC D3/Visualization Project]]></title>
    <link href="http://sciruby.com/blog/2014/07/02/progress-of-d3-project/"/>
    <updated>2014-07-02T17:09:00-04:00</updated>
    <id>http://sciruby.com/blog/2014/07/02/progress-of-d3-project</id>
    <content type="html"><![CDATA[<p>This week is the half-way point of this year's Google Summer of Code. Let me report the progress during the term.</p>

<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/nyaoplot_top.png" alt="Example Nyaplot chart" /></p>

<h2>Progress on the front-end library</h2>

<p>I am developing <a href="https://github.com/domitry/Nyaplot">Nyaplot</a> as the front-end library for my work.</p>

<p>One topic on Nyaplot is API design. That is a difficult problem since each plotting library has very different methods for creating plots. For example, matplotlib and Bokeh are both written in Python, but their demo code is written in very different styles. After discussing with my mentor, I decided to implement the function-based API.</p>

<p>As an exmaple of that API, here is a minimal working example for generating bar charts with Nyaplot:</p>

<p><code>ruby
require 'nyaplot'
plot = Nyaplot::Plot.new
plot.add(:bar, ['nya1', 'nya2', 'nya3'],[10,20,30])
plot.show
</code>
If you want to change options (e.g., color or title), put the return value of Nyaplot::Plot.add into a variable and call its methods.</p>

<p><code>ruby
bar = plot.add(:bar, ['nya1', 'nya2', 'nya3'],[10,20,30])
bar.title("the number of cats") # name the bar chart
</code></p>

<h2>IRuby integration</h2>

<p>Interaction with <a href="https://github.com/minad/iruby">IRuby</a> is a priority for Nyaplot. IRuby is a web-based Ruby lab notebook-like environment, based on IPython, which is also useful for fast prototyping.</p>

<p>The image on top of this blog post is a hyperbolic spiral which I generated with Nyaplot in
IRuby. <a href="http://nbviewer.ipython.org/github/domitry/Nyaplot/blob/master/examples/notebook/Introduction.ipynb">Have a look at the notebook</a> on nbviewer, an IRuby and IPython notebook hosting services.</p>

<h2>Progress on the back-end library</h2>

<p>Nyaplot uses <a href="https://github.com/domitry/Nyaplotjs">Nyaplotjs</a> as its back-end library. I spent a lot of time to implement interactivity among multiple panes to Nyaplotjs. See <a href="http://www.domitry.com/gsoc/">an example</a>.</p>

<p><img src="https://dl.dropboxusercontent.com/u/47978121/gsoc/top.png" alt="alt text" /></p>

<p>The input data source is a TSV file of 2,044 lines. Multiple-pane interactivity is especially important when visualizing such a large dataset.</p>

<p>Have a look at the radio buttons beside the Venn diagram. The left three panels decide which set to put into each of 3 circles (VENN1, VENN2, VENN3). The right panel decides which data in each area (overlapping area, non-overlapping area, and all) to use in the other two panes.</p>

<p>The gray box on the histogram decides the range of PNR values. If you select the
range 0.3 to 0.7 with it, the right bar chart will reflect that and show how many
of the selected data are in that range.</p>

<p>Nyaplotjs provides this interactivity using an event handler connected to a dataframe object. That
allows us to handle unidirectional update method (e.g., histogram updates bar chart, but bar chart does not update histogram).</p>

<h2>Conclusion</h2>

<p>I finished the first half term of Google Summer of Code 2014, but I still have a lot of
things to do. I would like to continue to add interactivity to both the front-end and back-end libraries.</p>

<p>I am developing those two libraries in separate repositories on GitHub. If you are interested, feel free to raise issues or send pull-requests, even during the GSoC term.</p>

<ul>
<li><a href="https://github.com/domitry/Nyaplot">Nyaplot - GitHub</a></li>
<li><a href="https://github.com/domitry/Nyaplotjs">Nyaplotjs - GitHub</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
