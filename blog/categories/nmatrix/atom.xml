<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NMatrix | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/nmatrix/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2014-08-23T18:10:42-04:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing the FFTW SciRuby GSoC project]]></title>
    <link href="http://sciruby.com/blog/2014/06/04/introducing-the-fftw-sciruby-gsoc-project/"/>
    <updated>2014-06-04T12:30:00-04:00</updated>
    <id>http://sciruby.com/blog/2014/06/04/introducing-the-fftw-sciruby-gsoc-project</id>
    <content type="html"><![CDATA[<p>My name is Magdalen Berns and I am a physics student with a technical
background in live audio. I am particularly interested in using science
and technology to improve access for all.</p>

<p>This summer, I will be working on implementing the external library
appropriately named "Fastest Fourier Transform in the West" version 3
(FFTW3) C and Fortran API in Ruby for this year's Google Summer of Code
(GSoC).</p>

<p>The primary aim of the project is to give SciRuby the capability to
handle signal analysis, processing and synthesis by performing discrete
fast Fourier transform operations on NMatrix objects.</p>

<p>After some investigation during the preparation stages of GSoC, it was
determined that implementing FFTW3 is more desirable than starting from
scratch in pure Ruby because the FFTW3 API is already extensively used,
developed, and optimised far beyond what would be achievable in just
three months. So, putting FFTW3 in the driving seat allows the SciRuby
project to take advantage of the good work of the FFTW3 developers by
bringing it to Ruby.</p>

<p>Putting NMatrix to the test with FFTW3 should give users the
opportunity to test drive NMatrix &mdash; and SciRuby's NMatrix developers a
chance to root out bugs.</p>

<p>Since a gem called ruby-fftw3 already existed to perform FFTW3 operations
on NArray objects, I forked that repository as a starting point. <a href="https://github.com/thisMagpie/fftw">Things are progressing on my Github fork</a> right now.</p>

<p>My mentor for this project is Colin Fuller who is an exceptionally
talented programmer &mdash; and he really knows his git too. He has been a
great help as I adapt to the learning curve of working in C and
Ruby (languages which I am less familiar with than say, Java or
JavaScript).</p>

<p>As I work, I intend to share useful gems of information I gather. Those, in addition to my weekly project updates, will appear right here in this blog so others can hopefully benefit.</p>

<p>I have already posted a few useful bits and bobs on
<a href="http://thismagpie.com">thismagpie.com</a> which relate to my work so far.
I hope to add those to the SciRuby blog, too, provided
the readers are interested in that and time permits. Of course, readers here can feel free to have a browse
of the keywords <a href="http://thismagpie.com/keyword/sciruby">sciruby</a>,
<a href="http://thismagpie.com/keyword/ruby">ruby</a> and
<a href="http://thismagpie.com/keyword/git">git</a> on there for the time being.
I sometimes add posts, manuals and tutorials from external sites where I
find useful ones on the web too, so watch out for these too.</p>

<p>Please, feel free to watch or follow along as the project comes together
and those inclined are welcome to share constructive comments and advice
or raise bugs on the fftw3 issue tracker. Input about my work is very
welcome as the project progresses. This gem is being written for the
community, after all!</p>

<p>You can find me on Twitter (Facebook) or GitHub under the username @thisMagpie.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NMatrix nearing beta release]]></title>
    <link href="http://sciruby.com/blog/2013/09/18/nmatrix-nearing-beta-release/"/>
    <updated>2013-09-18T15:18:00-04:00</updated>
    <id>http://sciruby.com/blog/2013/09/18/nmatrix-nearing-beta-release</id>
    <content type="html"><![CDATA[<p>As of this writing, NMatrix v0.0.9 is available on RubyGems. It is likely that the next version will be a beta release
candidate, as there's only one critical feature still missing (<code>==</code> between matrices of different storage types).</p>

<p>An enormous amount has changed since my last entry.</p>

<h2>New, friendlier constructor</h2>

<p>First and foremost, NMatrix sports a new constructor, based
on <a href="https://groups.google.com/d/msg/sciruby-dev/tPwnmPbRR_U/PL0Nc92gdzEJ">helpful comments from folks on the listserv</a>. Here
are some examples of construction:</p>

<pre><code>NMatrix.new([4,4], 0) # 4x4 dense matrix of :int32, all 0
NMatrix.new([4,4], 0.0) # 4x4 dense matrix of :float64, all 0.0
NMatrix.new([4,4], 0.0, dtype: :complex64) # 4x4 dense matrix of :complex64
NMatrix.new([1,4], stype: :yale) # size 4 sparse (Yale) row vector of 0s
NMatrix.new([4,3], [0,1,2]) # 4 rows, 3 columns: gradient across each row from 0 to 2 (int32)
NMatrix.new([4,3], [0,1,2], stype: :yale, default: 0) # same as above, but Yale storage (int32)
NMatrix.new([4,1], stype: :list, dtype: :rational128) # size 4 sparse (list) column vector of rational 0s
NMatrix.new([4,4]) # 4x4 dense matrix containing nils
NMatrix.new([4,4], dtype: :int64) # 4x4 uninitialized dense matrix containing 64-bit integers
NMatrix.new(4)     # same as above
</code></pre>

<p>The different storage types (stypes) have slightly different behaviors when no initialization value is provided. This
may change in the future, but addresses the somewhat different use-cases of these storage types.</p>

<p>I show a variety of examples above, several of which are not particularly wise uses --- for example, the <code>[0,1,2]</code> Yale
gradient, which uses 32-bit integers and must store 11 column indices and pointers (which are most likely unsigned
long integers) in addition to the 11 entries (4 for the always-stored diagonal, 1 for the default, and 6 for the
non-diagonal non-zeros).</p>

<p>The key to understanding the differing construction is the default value. All sparse matrices need a default. Usually we
think of sparse matrices as being zero-based (only non-zero values are stored), but NMatrix now allows other defaults.
However, dense matrices don't need defaults, and in fact sometimes it's more efficient to allocate them without
initializing them --- such as if they're about to store the results of some LAPACK function call. But if they contain
Ruby objects, they <strong>have</strong> to be initialized, which is why they become nil.</p>

<p>We're still working out a few bugs in construction. If you find any, please report them in our <a href="http://github.com/SciRuby/nmatrix/issues">issue tracker</a>.</p>

<h2>Elimination of NVectors</h2>

<p>We removed the NVector class. Frankly, it didn't make sense. A vector can't have an orientation unless it has multiple
dimensions --- even if some of those dimensions have length 1. Now, vectors and matrices are treated the same in the code.</p>

<p>The good news is that element access (<code>[]</code>) has been rewritten so that the programmer only needs provide the coordinates
whose dimensions are not 1. For example:</p>

<pre><code>n = NMatrix.new([4,1,3], 0) # 3-dimensional matrix of 0s
n[2,1] == n[2,0,1]
=&gt; true
</code></pre>

<p>The same rule applies to slicing.</p>

<h2>Slicing improvements</h2>

<p>Aleksey Timin contributed the framework for matrix slicing. Matrices can be sliced by copying or by reference. Modifying
a copy-slice does not modify the original matrix; but modifying a reference slice does.</p>

<p>A copy of some portion of the matrix may be made using <code>NMatrix#slice</code>:</p>

<pre><code>new_matrix = n.slice(0..1,0..2)
</code></pre>

<p>And what appears to be a copy, but is actually a reference, may be made using brackets:</p>

<pre><code>ref = n[0..1,0..2]
</code></pre>

<p>Reference slices may also be modified in a variety of ways:</p>

<pre><code>n[0..4,2..8] = 0   # change all entries to 0
n[0..4,2..8] = [0,1,2]  # change the selected entries to [0,1,2,0,1,2,0,1,2...]
n[0..4,2..8] = NMatrix.new([3,3], [0,1,2]) # same as above
</code></pre>

<p>For the sake of speed, each of these <code>[]=</code> returns the right-hand value, whether that value is an array, matrix, or
single value. So, you can do this:</p>

<pre><code>x = m[0..4,2..8] = n[0..1,0..2] = [1,2,3]
</code></pre>

<p>and <code>x</code> will be equal to <code>[1,2,3]</code> after the evaluation.</p>

<h2>Iteration</h2>

<p>Matrices are now enumerable. There are a variety of enumerators --- namely <code>each_with_indices</code> (and <code>each</code>), <code>each_stored_with_indices</code>,
and <code>each_ordered_stored_with_indices</code>. The first, <code>each</code>, is guaranteed to produce the same iteration regardless of the
storage type. The other two iterate only across the stored entries.</p>

<h2>Elementwise comparisons</h2>

<p>A regular matrix comparison, returning a single boolean, can be accomplished using <code>==</code> or <code>!=</code>. In earlier versions of
NMatrix, the results of the element-wise versions, <code>=~</code>, <code>!~</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, and <code>&lt;=</code>, were matrices of 0s and 1s,
stored using the <code>:byte</code> dtype.</p>

<p>Now, these comparisons return matrices of Ruby objects:</p>

<pre><code>n &lt; m
=&gt; [ true,  false, false, true,
     false, false, false, true,
     true,  true,  true,  true  ]
</code></pre>

<p>Try experimenting with sparse matrices to see how the default value (<code>#default_value</code>) is initialized on the result during an
elementwise comparison.</p>

<h2>Chunky bacon</h2>

<p>I'm really excited about all of the chunky bacon in our latest release. I feel like things are really coming together
for our library. I'm also glad to see that people are using it.</p>

<p>If you're thinking of using NMatrix yourself, I strongly encourage it. Although I'm writing my dissertation, I plan to
prioritize troubleshooting ahead of just about everything else. I want using NMatrix to be an easy choice for every
Rubyist.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use NMatrix's shortcuts]]></title>
    <link href="http://sciruby.com/blog/2012/12/07/how-to-use-nmatrix-shortcuts/"/>
    <updated>2012-12-07T12:30:00-05:00</updated>
    <id>http://sciruby.com/blog/2012/12/07/how-to-use-nmatrix-shortcuts</id>
    <content type="html"><![CDATA[<p class="warning"><strong>Warning:</strong> This code predates v0.0.9 alpha, which is when the NMatrix constructor changed. Please check the <a href="https://github.com/SciRuby/nmatrix/wiki/Getting-started#shortcuts">NMatrix Getting Started guide</a> for the most recent information.</p>


<p>John Woods <a href="https://github.com/SciRuby/nmatrix/commit/2b480ce0985affc7218fc341fcb4e5024b30545b">merged my last pull request to NMatrix</a> recently and I wanted to write about why we created these shortcuts and what can be done with them. <!--more--></p>

<h2>The need for shortcuts</h2>

<p>The first iteration of NMatrix shortcuts was written by <a href="https://github.com/dcarrera">Daniel Carrera</a> and sent to the mailing list, where I started working with them. Some discussions, decisions and two pull requests later, we have a working set of methods to create common matrices (<code>zeros</code>, <code>ones</code>, <code>random</code>, etc) and do some cool stuff (<code>column</code> and <code>linspace</code>) very easily.</p>

<p>There are at least two good reasons to have these shortcuts: MATLAB users are going to feel at home, and the shortcuts allow us to prototype and experiment more rapidly. For example, it's dead simple to create an identify matrix when you need one:</p>

<pre><code>&gt;&gt; require 'nmatrix'

&gt;&gt; matrix = NMatrix.identity(3) # 3x3
=&gt; #&lt;NMatrix:0x007faa5b8cda40shape:[3,3] dtype:float64 stype:dense&gt; 
&gt;&gt; matrix.pp

# [1.0, 0.0, 0.0]
# [0.0, 1.0, 0.0]
# [0.0, 0.0, 1.0]
</code></pre>

<p>And a random matrix to test some operation:</p>

<pre><code>&gt;&gt; rand_matrix = NMatrix.random(4) # 4x4
=&gt; #&lt;NMatrix:0x007faa5b01cdd8shape:[4,4] dtype:float64 stype:dense&gt;
&gt;&gt; rand_matrix.pp

# [0.5933103148378577, 0.8556103970281977, 0.7176768395610358, 0.07160353964395305]
# [0.8566365570076784, 0.33925854948960343, 0.5994298479703805, 0.6906794137948586]
# [0.5684593743073485, 0.10273166792035393, 0.46187577773882293, 0.586085963973687]
# [0.8944982538369494, 0.9896291945923837, 0.8787034784673503, 0.5933103148378577]
</code></pre>

<h2>Shortcuts available</h2>

<p>The following list is taken from <a href="https://github.com/SciRuby/nmatrix/wiki/NMatrix">NMatrix's wiki</a>. All are class methods on <code>NMatrix</code>.</p>

<pre><code>ones(3,3)                    # A 3x3 matrix of ones.
zeros(4,4) or zeroes(4,4)    # Creates a matrix of zeros with dimensions as parameters.
identity(5,5) or eye(5,5)    # A 5x5 identity matrix. Only works with NMatrix.
seq(8)                       # An 8-vector with a sequence of values from 0 to 7.
random(6,6)                  # A 6x6 matrix of random values between 0 and 1.

column(2)                    # Return the 2nd column of the original matrix. Only works with NMatrix.

indgen(8)                    # To make IDL users happy. Same as `seq(8, :int32)`.
findgen(8)                   # Same as `seq(8, :float32)`.
bindgen(8)                   # Same as `seq(8, :byte)`.
cindgen(8)                   # Same as `seq(8, :complex64)`.

linspace(0, pi, 100)         # A vector of 100 values from 0 to pi, inclusive. Only works with NVector.
</code></pre>

<p>The method names are mostly from MATLAB. In the future, when more functionality is added, we'll try to create a more "Ruby-like" feel to the API. But as these shortcuts do very primitive tasks, there isn't any obvious room for improvement. (Feel free to prove us wrong, however!)</p>

<p>I'll create a separate wiki page for the shortcuts to be able to organize and put more information about how to use them. But I want to create a better RDoc documentation for NMatrix — so the full API will probably be referenced there. I'll write a new blog post here when something along these lines is done.</p>

<h2>Examples</h2>

<p>First, let's try normalizing the columns of an NMatrix.</p>

<pre><code>require 'nmatrix'

m = NMatrix.seq(3, :float32)
m.pp

# [0.0, 1.0, 2.0]
# [3.0, 4.0, 5.0]
# [6.0, 7.0, 8.0]

(0 .. m.shape[1] - 1).each do |j|
  col = m.column(j)
    norm = Math.sqrt(col.transpose.dot(col)[0, 0])
    (0 .. m.shape[0] - 1).each { |i| m[i,j] /= norm }
end

m.pp

# [0.0, 0.12309148907661438, 0.20739033818244934]
# [0.4472135901451111, 0.4923659563064575, 0.5184758305549622]
# [0.8944271802902222, 0.861640453338623, 0.8295613527297974]

(0 .. m.shape[1] - 1).each do |j|
  col = m.column(j)
  puts Math.sqrt(col.transpose.dot(col)[0,0])
end

# 0.9999999701976772
# 1.0
# 1.0
</code></pre>

<p>Unfortunately, slice by reference isn't working on <code>HEAD</code>, or we could make a few additional improvements (see issue <a href="https://github.com/SciRuby/nmatrix/issues/51">#51</a>).</p>

<p>The other thing that I've wanted to do is to use <code>linspace</code> to generate points for plotting sines, cosines, etc. Here is an example:</p>

<pre><code>require 'nmatrix'

vector = NVector.linspace(0, Math::PI, 10)
vector.pretty_print

# 0.0
# 0.3490658503988659
# 0.6981317007977318
# 1.0471975511965976
# 1.3962634015954636
# 1.7453292519943295
# 2.0943951023931953
# 2.443460952792061
# 2.792526803190927
# 3.141592653589793

10.times do |i|
  vector[k, 0] = Math::sin(vector[k, 0])
end

vector.pretty_print

# 0.0
# 0.3420201433256687
# 0.6427876096865393
# 0.8660254037844386
# 0.984807753012208
# 0.984807753012208
# 0.8660254037844388
# 0.6427876096865395
# 0.3420201433256689
# 1.2246467991473532e-16
</code></pre>

<p>These results show a happy result, in that we are able to use NMatrix for simple tasks already. Of course, there are problems to be solved, e.g. slice by reference, inversion for all dtypes, eigenvalues. But it's going somewhere, it's growing.</p>

<p>I hope that by this time next year we'll have a very mature linear algebra library (and much more).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Second NMatrix Alpha Released]]></title>
    <link href="http://sciruby.com/blog/2012/09/24/second-nmatrix-alpha-released/"/>
    <updated>2012-09-24T14:12:00-04:00</updated>
    <id>http://sciruby.com/blog/2012/09/24/second-nmatrix-alpha-released</id>
    <content type="html"><![CDATA[<p>On Friday, we released the somewhat overdue second alpha of <a href="http://github.com/SciRuby/nmatrix">NMatrix</a>, version 0.0.2.</p>

<p>This second alpha has boasts a significantly improved and much more maintainable code base, thanks to our Summer 2012
 SciRuby Fellow, <a href="https://github.com/chriswailes">Chris Wailes</a>, and sponsoring organization <a href="http://brighterplanet.com">Brighter Planet</a>. <!--more--></p>

<p>The library has been almost completely rewritten in C++, with API available for both C and C++.</p>

<p>It also includes basic slicing support for dense and list matrices and dense LU decomposition.</p>

<p>Check it out and let us know what you think! Remember to look in the <a href="https://github.com/SciRuby/nmatrix/issues?direction=desc&amp;sort=created&amp;state=open">issue tracker</a>
 if you have any problems.</p>

<p>Finally, if you're a student, you should consider applying to be a <a href="/blog/2012/09/24/sciruby-receives-ruby-association-grant--fellowships-available/">SciRuby Fellow</a> this winter or spring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SciRuby Receives Ruby Association Grant; Fellowships Available]]></title>
    <link href="http://sciruby.com/blog/2012/09/24/sciruby-receives-ruby-association-grant--fellowships-available/"/>
    <updated>2012-09-24T13:43:00-04:00</updated>
    <id>http://sciruby.com/blog/2012/09/24/sciruby-receives-ruby-association-grant--fellowships-available</id>
    <content type="html"><![CDATA[<p>We are incredibly pleased to announce that the Ruby Association has awarded us a <a href="http://www.ruby.or.jp/en/news/20120717.html">1,000,000 JPY grant</a>.</p>

<p>When we applied, we proposed to build upon our <a href="http://sciruby.com/blog/2012/05/08/sciruby-summer-of-code/">successful SciRuby Summer of Code</a>,
which we undertook with the support of <a href="http://brighterplanet.com">Brighter Planet</a>. We are pleased to announce applications
for SciRuby fellowships.<!--more--></p>

<h2>Funding Note</h2>

<p>A million yen translates to around $12,000, which is nearly enough to hire two graduate or undergraduate students
for an academic term. We would like to hire more than one; but for that, <a href="http://pledgie.com/campaigns/15783">we need your help</a>.</p>

<h2>Fellowship Terms</h2>

<ul>
<li>We plan to provide each fellow with a monthly stipend competitive with her or his home institution (e.g., if research assistants
in your graduate program typically receive $1,500 per month, your stipend with us would be $1,500 per month).</li>
<li>Tenure will be one semester or one quarter (with an option to renew for a second quarter), depending upon the academic
calendar of the student's home institution.</li>
<li>Tenure must begin no later than January 2013.</li>
<li>Fellows are expected to work full-time (forty hours per week) on some element of <a href="http://github.com/SciRuby/nmatrix">NMatrix</a>.</li>
<li>The Ruby Association requires monthly progress reports for stipend payment.</li>
<li>Fellows will be assigned mentors, but should expect to work relatively independently unless located near a SciRuby mentor.</li>
</ul>


<h2>Requirements</h2>

<ul>
<li>Fluency in C/C++, Ruby, and the English language.</li>
<li>Comfort with git and Github.</li>
<li>An understanding of GDB and Valgrind (or similar debugging tools) as well as RSpec.</li>
<li>A course of study in the sciences or engineering at an accredited college or university.</li>
</ul>


<h2>To Apply</h2>

<p>Please answer the following questions to the best of your ability. You may provide long or short answers, as you feel is appropriate.</p>

<p>Don't feel that you should limit yourself if you have important things to say; but don't feel that you have to make things up. Sometimes one word is appropriate, sometimes one sentence, and sometimes many paragraphs.</p>

<ol>
<li><p><strong>Contact information.</strong> Please provide your email address, GitHub username, and <strong>approximate</strong> physical location.</p></li>
<li><p>Why do you like Ruby?</p></li>
<li><p>What do you like about science and why? What area do you like best?</p></li>
<li><p>Describe your <strong>experience</strong> with the following: Ruby, C/C++, other languages.</p></li>
<li><p>Describe your <strong>educational background</strong> (school, degree plan, major, past degrees, research area).</p></li>
<li><p>Please describe what you plan to work on for this project. (Check out the <a href="http://github.com/SciRuby/nmatrix/issues">NMatrix issue tracker</a> for ideas.)</p></li>
<li><p>What would be the outcome of your work?</p></li>
<li><p>If selected, you will be providing monthly demonstrations of you work. What milestones do you envision for your project?</p></li>
<li><p>Please provide contact information for your graduate program or someone who can offer stipend information.</p></li>
<li><p>Please provide a link to your school's academic calendar.</p></li>
<li><p>What other responsibilities do you have during your likely fellowship term? How will you allocate and manage your time?</p></li>
<li><p>How do you feel about <strong>chunky bacon</strong>?</p></li>
<li><p>Is there anything else you think we should have asked but didn't?</p></li>
</ol>


<p>Email your answers to sciruby.project on gmail. <em>Please include a resume or curriculum vitae.</em></p>

<h3>Application Deadline</h3>

<p>Applications are due by the 31st of October, 2012.</p>
]]></content>
  </entry>
  
</feed>
