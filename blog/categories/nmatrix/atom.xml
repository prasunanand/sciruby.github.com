<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NMatrix | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/nmatrix/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2013-04-15T18:27:40-05:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use NMatrix's shortcuts]]></title>
    <link href="http://sciruby.com/blog/2012/12/07/how-to-use-nmatrix-shortcuts/"/>
    <updated>2012-12-07T12:30:00-06:00</updated>
    <id>http://sciruby.com/blog/2012/12/07/how-to-use-nmatrix-shortcuts</id>
    <content type="html"><![CDATA[<p>John Woods <a href="https://github.com/SciRuby/nmatrix/commit/2b480ce0985affc7218fc341fcb4e5024b30545b">merged my last pull request to NMatrix</a> recently and I wanted to write about why we created these shortcuts and what can be done with them. <!--more--></p>

<h2>The need for shortcuts</h2>

<p>The first iteration of NMatrix shortcuts was written by <a href="https://github.com/dcarrera">Daniel Carrera</a> and sent to the mailing list, where I started working with them. Some discussions, decisions and two pull requests later, we have a working set of methods to create common matrices (<code>zeros</code>, <code>ones</code>, <code>random</code>, etc) and do some cool stuff (<code>column</code> and <code>linspace</code>) very easily.</p>

<p>There are at least two good reasons to have these shortcuts: MATLAB users are going to feel at home, and the shortcuts allow us to prototype and experiment more rapidly. For example, it's dead simple to create an identify matrix when you need one:</p>

<pre><code>&gt;&gt; require 'nmatrix'

&gt;&gt; matrix = NMatrix.identity(3) # 3x3
=&gt; #&lt;NMatrix:0x007faa5b8cda40shape:[3,3] dtype:float64 stype:dense&gt; 
&gt;&gt; matrix.pp

# [1.0, 0.0, 0.0]
# [0.0, 1.0, 0.0]
# [0.0, 0.0, 1.0]
</code></pre>

<p>And a random matrix to test some operation:</p>

<pre><code>&gt;&gt; rand_matrix = NMatrix.random(4) # 4x4
=&gt; #&lt;NMatrix:0x007faa5b01cdd8shape:[4,4] dtype:float64 stype:dense&gt;
&gt;&gt; rand_matrix.pp

# [0.5933103148378577, 0.8556103970281977, 0.7176768395610358, 0.07160353964395305]
# [0.8566365570076784, 0.33925854948960343, 0.5994298479703805, 0.6906794137948586]
# [0.5684593743073485, 0.10273166792035393, 0.46187577773882293, 0.586085963973687]
# [0.8944982538369494, 0.9896291945923837, 0.8787034784673503, 0.5933103148378577]
</code></pre>

<h2>Shortcuts available</h2>

<p>The following list is taken from <a href="https://github.com/SciRuby/nmatrix/wiki/NMatrix">NMatrix's wiki</a>. All are class methods on <code>NMatrix</code>.</p>

<pre><code>ones(3,3)                    # A 3x3 matrix of ones.
zeros(4,4) or zeroes(4,4)    # Creates a matrix of zeros with dimensions as parameters.
identity(5,5) or eye(5,5)    # A 5x5 identity matrix. Only works with NMatrix.
seq(8)                       # An 8-vector with a sequence of values from 0 to 7.
random(6,6)                  # A 6x6 matrix of random values between 0 and 1.

column(2)                    # Return the 2nd column of the original matrix. Only works with NMatrix.

indgen(8)                    # To make IDL users happy. Same as `seq(8, :int32)`.
findgen(8)                   # Same as `seq(8, :float32)`.
bindgen(8)                   # Same as `seq(8, :byte)`.
cindgen(8)                   # Same as `seq(8, :complex64)`.

linspace(0, pi, 100)         # A vector of 100 values from 0 to pi, inclusive. Only works with NVector.
</code></pre>

<p>The method names are mostly from MATLAB. In the future, when more functionality is added, we'll try to create a more "Ruby-like" feel to the API. But as these shortcuts do very primitive tasks, there isn't any obvious room for improvement. (Feel free to prove us wrong, however!)</p>

<p>I'll create a separate wiki page for the shortcuts to be able to organize and put more information about how to use them. But I want to create a better RDoc documentation for NMatrix â€” so the full API will probably be referenced there. I'll write a new blog post here when something along these lines is done.</p>

<h2>Examples</h2>

<p>First, let's try normalizing the columns of an NMatrix.</p>

<pre><code>require 'nmatrix'

m = NMatrix.seq(3, :float32)
m.pp

# [0.0, 1.0, 2.0]
# [3.0, 4.0, 5.0]
# [6.0, 7.0, 8.0]

(0 .. m.shape[1] - 1).each do |j|
  col = m.column(j)
    norm = Math.sqrt(col.transpose.dot(col)[0, 0])
    (0 .. m.shape[0] - 1).each { |i| m[i,j] /= norm }
end

m.pp

# [0.0, 0.12309148907661438, 0.20739033818244934]
# [0.4472135901451111, 0.4923659563064575, 0.5184758305549622]
# [0.8944271802902222, 0.861640453338623, 0.8295613527297974]

(0 .. m.shape[1] - 1).each do |j|
  col = m.column(j)
  puts Math.sqrt(col.transpose.dot(col)[0,0])
end

# 0.9999999701976772
# 1.0
# 1.0
</code></pre>

<p>Unfortunately, slice by reference isn't working on <code>HEAD</code>, or we could make a few additional improvements (see issue <a href="https://github.com/SciRuby/nmatrix/issues/51">#51</a>).</p>

<p>The other thing that I've wanted to do is to use <code>linspace</code> to generate points for plotting sines, cosines, etc. Here is an example:</p>

<pre><code>require 'nmatrix'

vector = NVector.linspace(0, Math::PI, 10)
vector.pretty_print

# 0.0
# 0.3490658503988659
# 0.6981317007977318
# 1.0471975511965976
# 1.3962634015954636
# 1.7453292519943295
# 2.0943951023931953
# 2.443460952792061
# 2.792526803190927
# 3.141592653589793

10.times do |i|
  vector[k, 0] = Math::sin(vector[k, 0])
end

vector.pretty_print

# 0.0
# 0.3420201433256687
# 0.6427876096865393
# 0.8660254037844386
# 0.984807753012208
# 0.984807753012208
# 0.8660254037844388
# 0.6427876096865395
# 0.3420201433256689
# 1.2246467991473532e-16
</code></pre>

<p>These results show a happy result, in that we are able to use NMatrix for simple tasks already. Of course, there are problems to be solved, e.g. slice by reference, inversion for all dtypes, eigenvalues. But it's going somewhere, it's growing.</p>

<p>I hope that by this time next year we'll have a very mature linear algebra library (and much more).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Second NMatrix Alpha Released]]></title>
    <link href="http://sciruby.com/blog/2012/09/24/second-nmatrix-alpha-released/"/>
    <updated>2012-09-24T14:12:00-05:00</updated>
    <id>http://sciruby.com/blog/2012/09/24/second-nmatrix-alpha-released</id>
    <content type="html"><![CDATA[<p>On Friday, we released the somewhat overdue second alpha of <a href="http://github.com/SciRuby/nmatrix">NMatrix</a>, version 0.0.2.</p>

<p>This second alpha has boasts a significantly improved and much more maintainable code base, thanks to our Summer 2012
 SciRuby Fellow, <a href="https://github.com/chriswailes">Chris Wailes</a>, and sponsoring organization <a href="http://brighterplanet.com">Brighter Planet</a>. <!--more--></p>

<p>The library has been almost completely rewritten in C++, with API available for both C and C++.</p>

<p>It also includes basic slicing support for dense and list matrices and dense LU decomposition.</p>

<p>Check it out and let us know what you think! Remember to look in the <a href="https://github.com/SciRuby/nmatrix/issues?direction=desc&amp;sort=created&amp;state=open">issue tracker</a>
 if you have any problems.</p>

<p>Finally, if you're a student, you should consider applying to be a <a href="/blog/2012/09/24/sciruby-receives-ruby-association-grant--fellowships-available/">SciRuby Fellow</a> this winter or spring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SciRuby Receives Ruby Association Grant; Fellowships Available]]></title>
    <link href="http://sciruby.com/blog/2012/09/24/sciruby-receives-ruby-association-grant--fellowships-available/"/>
    <updated>2012-09-24T13:43:00-05:00</updated>
    <id>http://sciruby.com/blog/2012/09/24/sciruby-receives-ruby-association-grant--fellowships-available</id>
    <content type="html"><![CDATA[<p>We are incredibly pleased to announce that the Ruby Association has awarded us a <a href="http://www.ruby.or.jp/en/news/20120717.html">1,000,000 JPY grant</a>.</p>

<p>When we applied, we proposed to build upon our <a href="http://sciruby.com/blog/2012/05/08/sciruby-summer-of-code/">successful SciRuby Summer of Code</a>,
which we undertook with the support of <a href="http://brighterplanet.com">Brighter Planet</a>. We are pleased to announce applications
for SciRuby fellowships.<!--more--></p>

<h2>Funding Note</h2>

<p>A million yen translates to around $12,000, which is nearly enough to hire two graduate or undergraduate students
for an academic term. We would like to hire more than one; but for that, <a href="http://pledgie.com/campaigns/15783">we need your help</a>.</p>

<h2>Fellowship Terms</h2>

<ul>
<li>We plan to provide each fellow with a monthly stipend competitive with her or his home institution (e.g., if research assistants
in your graduate program typically receive $1,500 per month, your stipend with us would be $1,500 per month).</li>
<li>Tenure will be one semester or one quarter (with an option to renew for a second quarter), depending upon the academic
calendar of the student's home institution.</li>
<li>Tenure must begin no later than January 2013.</li>
<li>Fellows are expected to work full-time (forty hours per week) on some element of <a href="http://github.com/SciRuby/nmatrix">NMatrix</a>.</li>
<li>The Ruby Association requires monthly progress reports for stipend payment.</li>
<li>Fellows will be assigned mentors, but should expect to work relatively independently unless located near a SciRuby mentor.</li>
</ul>


<h2>Requirements</h2>

<ul>
<li>Fluency in C/C++, Ruby, and the English language.</li>
<li>Comfort with git and Github.</li>
<li>An understanding of GDB and Valgrind (or similar debugging tools) as well as RSpec.</li>
<li>A course of study in the sciences or engineering at an accredited college or university.</li>
</ul>


<h2>To Apply</h2>

<p>Please answer the following questions to the best of your ability. You may provide long or short answers, as you feel is appropriate.</p>

<p>Don't feel that you should limit yourself if you have important things to say; but don't feel that you have to make things up. Sometimes one word is appropriate, sometimes one sentence, and sometimes many paragraphs.</p>

<ol>
<li><p><strong>Contact information.</strong> Please provide your email address, GitHub username, and <strong>approximate</strong> physical location.</p></li>
<li><p>Why do you like Ruby?</p></li>
<li><p>What do you like about science and why? What area do you like best?</p></li>
<li><p>Describe your <strong>experience</strong> with the following: Ruby, C/C++, other languages.</p></li>
<li><p>Describe your <strong>educational background</strong> (school, degree plan, major, past degrees, research area).</p></li>
<li><p>Please describe what you plan to work on for this project. (Check out the <a href="http://github.com/SciRuby/nmatrix/issues">NMatrix issue tracker</a> for ideas.)</p></li>
<li><p>What would be the outcome of your work?</p></li>
<li><p>If selected, you will be providing monthly demonstrations of you work. What milestones do you envision for your project?</p></li>
<li><p>Please provide contact information for your graduate program or someone who can offer stipend information.</p></li>
<li><p>Please provide a link to your school's academic calendar.</p></li>
<li><p>What other responsibilities do you have during your likely fellowship term? How will you allocate and manage your time?</p></li>
<li><p>How do you feel about <strong>chunky bacon</strong>?</p></li>
<li><p>Is there anything else you think we should have asked but didn't?</p></li>
</ol>


<p>Email your answers to sciruby.project on gmail. <em>Please include a resume or curriculum vitae.</em></p>

<h3>Application Deadline</h3>

<p>Applications are due by the 31st of October, 2012.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Major Refactoring in the Pipeline]]></title>
    <link href="http://sciruby.com/blog/2012/07/31/major-refactoring-in-the-pipeline/"/>
    <updated>2012-07-31T16:23:00-05:00</updated>
    <id>http://sciruby.com/blog/2012/07/31/major-refactoring-in-the-pipeline</id>
    <content type="html"><![CDATA[<p>Activity has picked up enormously on <a href="http://groups.google.com/group/sciruby-dev">our listserv</a> over the last few weeks,
which makes us all very happy.</p>

<p><a href="https://github.com/chriswailes">Chris Wailes</a> and I have been working on a major refactoring of <a href="http://github.com/SciRuby/nmatrix">NMatrix</a>,
our replacement for NArray. You may recall that we released our first alpha (0.0.1) back in April, and that we've been
relatively silent since then.<!--more--></p>

<p>We're pleased to announce that our second alpha, NMatrix v0.0.2, should be available as a gem by mid-August.</p>

<p>Our first alpha was a proof of concept. The second alpha is the framework upon which we will build an empire of chunky
bacon.</p>

<p>Chris came up with the idea to convert all of NMatrix's Ruby/C template code into C++ templates, and we've been working
on that steadily. These are cleaner and easier to maintain than the C parser-based templates I wrote a few months ago.</p>

<p>In addition, I have incorporated basic slicing, contributed by <a href="http://github.com/flipback">Aleksey Timin</a>, who has been
absolutely essential to our growing project.</p>

<p>One major hiccup has been that NMatrix and NArray conflict with one another when both are included (particularly poor
planning on my part). This means that Ruby/GSL can't work with NMatrix without some modifications -- which are underway
in a <a href="http://github.com/SciRuby/rb-gsl">fork</a>. We plan to release fixes for Ruby/GSL and Statsample as soon as possible.</p>

<p>We want to again thank <a href="http://brighterplanet.com">Brighter Planet</a> for their support of our summer coding fellowship.
Little of this would be possible without them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First NMatrix Alpha Released]]></title>
    <link href="http://sciruby.com/blog/2012/04/11/first-nmatrix-alpha-released/"/>
    <updated>2012-04-11T13:36:00-05:00</updated>
    <id>http://sciruby.com/blog/2012/04/11/first-nmatrix-alpha-released</id>
    <content type="html"><![CDATA[<p>Two months ago, I <a href="2012/02/11/numeric-matrix-considerations">mentioned the existence of a prototype Ruby linear algebra library</a>, written in C.</p>

<p>I am pleased to announce that yesterday we released our first alpha of said library, <a href="/nmatrix/">NMatrix</a> v0.0.1.<!--more--></p>

<h2>Creating Matrices</h2>

<p>There are lots of different ways to create matrices. The first and easiest is to supply dimensions and initial data:</p>

<pre><code>>> n = NMatrix.new(4, 0) # a square 4x4 dense zero matrix
=> #&lt;NMatrix:0x9a57e14shape:[4,4] dtype:int32 stype:dense&gt;
>> n.pretty_print
0  0  0  0
0  0  0  0
0  0  0  0
0  0  0  0
=> nil
</code></pre>


<h2>Data Types</h2>

<p>You may notice that this first matrix defaulted to <tt>dtype=:int32</tt>. NMatrix will try to guess the <i>dtype</i> based on the
first initial value you provide (e.g., <tt>NMatrix.new(4, [0.0, 1])</tt> will be :float32), but you can choose to provide
a <i>dtype</i> in addition to or in lieu of initial values:</p>

<pre><code>>> n = NMatrix.new(4, [0,1], :rational128)
=> #&lt;NMatrix:0x9959e04shape:[4,4] dtype:rational128 stype:dense&gt;
>> n.pretty_print
0/1  1/1  0/1  1/1
0/1  1/1  0/1  1/1
0/1  1/1  0/1  1/1
0/1  1/1  0/1  1/1
>> m = NMatrix.new(4, :int64)  # no initialization of values
=> #&lt;NMatrix:0x99fad68shape:[4,4] dtype:int64 stype:dense&gt;
>> m.pretty_print
-1217641248  161386160  161386100  161385680
161385640  161385520  161385420  161384180
161384120  161381060  161381020  161412140
161411940  161411880  161411840  160879240
=> nil
</code></pre>


<h2>Storage Formats</h2>

<p>The storage type (<i>stype</i>) can also be specified, prior to the dimension argument. However, with sparse storage formats, initial values don't make sense, and these matrices will contain zeros by default.</p>

<pre><code># empty list-of-lists-of-lists 4x3x4 matrix
n = NMatrix.new(:list, [4,3,4], :int64)

# Ruby objects in a 'Yale' sparse matrix
m = NMatrix.new(:yale, [5,4], :object)

# A byte matrix containing a gradient
o = NMatrix.new(:dense, 5, [0,1,2,3,4], :byte)
</code></pre>


<p>The matrix <tt>m</tt> created above is a Yale-format sparse matrix, or more specifically, "new Yale," which differs from "old Yale" in that the diagonal is stored separately from the non-diagonal elements. Thus, diagonals can be accessed and set in constant time.</p>

<p>Currently, all storage is row-based.</p>

<h3>Conversion</h3>

<p>You can also convert between any of these three stypes using <tt>cast</tt>, e.g.,</p>

<pre><code>n = NMatrix.new(:list, 4, :int64)
n[0,0] = 5
n[0,3] = -2
dense = n.cast(:dense, :int64)
</code></pre>


<h2>Vectors</h2>

<p>Currently, only dense vectors are implemented as a child class of <tt>NMatrix</tt>, and creation is similar:</p>

<pre><code>>> nv = NVector.new(5, :int64)
=> #&lt;NVector:0x9a62328shape:[5,1] dtype:int64 stype:dense orientation:column&gt;
</code></pre>


<h2>Math Operations</h2>

<p>Most element-wise mathematical operations are supported for Yale and dense types. These use the basic operators (e.g., +, -, /, *, ==).</p>

<p>For non-element-wise matrix multiplication, use the <tt>dot</tt> instance method of NMatrix. Whole-matrix comparison (returning a single boolean value) is the <tt>equal?</tt> or <tt>eql?</tt> method.</p>

<h2>Road Map</h2>

<p>Much more remains to be written than has been completed. Here are some of our key priorities:</p>

<ul>
<li>determinants</li>
<li>matrix-vector multiplication for Yale</li>
<li>adaptation of SciRuby Matlab file reader to support NMatrix</li>
<li>in-place transposition</li>
</ul>


<p>If you want to get involved, I suggest visiting the <a href="https://github.com/sciruby/nmatrix/issues">NMatrix issue tracker</a>. It will contain not only bugs, but also features that need to be implemented.</p>

<h2>Conclusion</h2>

<p>We're all pretty excited about NMatrix. But we couldn't have gotten this far without Masahiro Tanaka's <a href="http://narray.rubyforge.org/">NArray</a>, which has served as a model for our library.</p>

<p>And we can't do it without your help. A numerical library in Ruby is no small endeavour, and probably requires at least one full-time programmer (which we do not have). Please consider contributing, even if it's just by letting us know what you think.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
</feed>
