<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GSOC2014 | SciRuby]]></title>
  <link href="http://sciruby.com/blog/categories/gsoc2014/atom.xml" rel="self"/>
  <link href="http://sciruby.com/"/>
  <updated>2014-06-19T16:47:34-04:00</updated>
  <id>http://sciruby.com/</id>
  <author>
    <name><![CDATA[SciRuby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Progress on Minimization methods]]></title>
    <link href="http://sciruby.com/blog/2014/06/19/progress-on-minimization-methods/"/>
    <updated>2014-06-19T01:00:00-04:00</updated>
    <id>http://sciruby.com/blog/2014/06/19/progress-on-minimization-methods</id>
    <content type="html"><![CDATA[<h2>Current Progress on Minimization Gem</h2>

<p>In the first half of the summer, I plan to introduce some new numerical minimization methods to SciRuby's Minimization gem. As per my proposal, I began by implementing the Powell's multidimensional minimization method. Powell's method has a better convergence in most cases than the Nelder&ndash;Mead algorithm, and is also a multidimensional minimization method which doesn't use any derivative of the function.</p>

<p>I started by studying SciPy and Apache Commons library's Powell's optimizer. I decided to base my implementation on the method from the <a href="http://commons.apache.org/proper/commons-math/">Apache Commons Mathematics Library</a>. Powell's method requires a line minimum searching algorithm, for which I used Brent minimizer (already available in SciRuby).</p>

<p>Having finished with Powell's method, I am now working on the Fletcher--Reeves minimization method &mdash; a gradient method which uses the first derivative of the integrating function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction: Minimization and Integration (Lahiru)]]></title>
    <link href="http://sciruby.com/blog/2014/06/18/introduction-minimization-and-integration/"/>
    <updated>2014-06-18T16:45:00-04:00</updated>
    <id>http://sciruby.com/blog/2014/06/18/introduction-minimization-and-integration</id>
    <content type="html"><![CDATA[<p class="note"><strong>Editor's Note:</strong> We have two students
working on numerical minimization and integration this summer, Rajat and
Lahiru. Rajat's introductory post appeared two weeks ago.</p>


<h2>Introduction </h2>

<p>I'm Lahiru Lasandun and I'm an undergraduate of University of Moratuwa, Sri Lanka. I've been selected for
Google Summer of Code 2014 for SciRuby's Minimization and Integration projects.</p>

<p>I was working with SciRuby about a month before GSOC started and did some tests on how to enhance the performance of
these numerical computations. My first idea was to use multi-threading. With the instuctions and guidance of mentors, I
tested more methods such as Erlang multi-processing, the AKKA package of multi-threading, and finally OpenCL. The final
decision was to use OpenCL to enhance computation power of these mathematical computations with the support of multi-cores
and GPUs.</p>

<h2>Minimization Gem</h2>

<p>After GSOC started, I began working on SciRuby's Minimization gem. I proposed multidimensional minimization methods for the
Minimization gem, which already had plenty of unidimensional minimization methods. I chose two non-gradient
and two gradient minimization methods as well as simulated annealing.</p>

<h2>Integration Gem</h2>

<p>For Integration, I proposed to replicate some unidimensional integration methods from the GNU Scientific Library, GSL. Additionally, I proposed to add OpenCL support to enhance performance of integration methods.</p>

<h2>Current Progress</h2>

<p>Currently, I am working on Nelder&ndash;Mead multidimensional minimization
method which is a non-gradient method, including working on the relevant
test cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Minimization and Integration project (Rajat)]]></title>
    <link href="http://sciruby.com/blog/2014/06/04/introduction-to-the-minimization-and-integration-project/"/>
    <updated>2014-06-04T14:23:00-04:00</updated>
    <id>http://sciruby.com/blog/2014/06/04/introduction-to-the-minimization-and-integration-project</id>
    <content type="html"><![CDATA[<p class="note"><strong>Editor's Note:</strong> We have two students
working on numerical minimization and integration this summer, Rajat and
Lahiru. Lahiru will be writing a separate post about his work.</p>


<h2>Introduction to the Minimization and Integration Project</h2>

<p>Hi. My name is Rajat Kapoor and I have been selected to work with
SciRuby for Google Summer of Code 2014.</p>

<p><a href="https://github.com/SciRuby/minimization">Minimization</a> and
<a href="https://github.com/SciRuby/integration">Integration</a> are two of the
many available gems in the SciRuby suite. My project this year aims to
improve these gems to replicate the functionality provided by GNU's
GSL. I will be trying to implement all the minimization and
integration algorithms present in GSL in pure Ruby, with improvements
as needed, so that these functions are easily accesible to all Ruby
users, while the users which have GSL already installed will have an
advantage in terms of speedy computations.</p>

<h2>What Minimization and Integration actually mean</h2>

<p>Minimization refers to the process of finding out the minimum of a
mathematical function whose values might depend on multiple
variables. Unidimensional minimization restricts these problems to
functions of one single variable. Integration is the same as the very
widely used concept in calculus which basically boils down to finding
the summation of the value of a function at small intervals, when the
width of the intervals in infinitesimally small. I can bet that you
knowingly or unknowingly use both these things on a daily basis.</p>

<h2>The plan</h2>

<p>The project can be broken into two major parts: Minimization and
Integration, as these are two seperate gems.</p>

<p>The Minimization gem can be broken in two parts: unidimensional (or
univariate) and multidimensional (multivariate). With respect to
coding, these two can again be broken down into sub-parts: pure Ruby
implementations and GSL support. The Integration gem will include
the pure Ruby implementations as well as GSL support. Along with this,
some support for symbolic integration will be added for JRuby
users by way of the JScience library.</p>

<h2>Progress</h2>

<p>The pure Ruby implementations of the unidimensional minimization part
are almost finished. I am also working on the GSL support for the same
along with it. I plan to finish up any unidimensional minimization
work by the end of this week and start the work with multidimensional
minimization methods.</p>

<p>Keep watching this blog for more updates regarding my project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the FFTW SciRuby GSoC project]]></title>
    <link href="http://sciruby.com/blog/2014/06/04/introducing-the-fftw-sciruby-gsoc-project/"/>
    <updated>2014-06-04T12:30:00-04:00</updated>
    <id>http://sciruby.com/blog/2014/06/04/introducing-the-fftw-sciruby-gsoc-project</id>
    <content type="html"><![CDATA[<p>My name is Magdalen Berns and I am a physics student with a technical
background in live audio. I am particularly interested in using science
and technology to improve access for all.</p>

<p>This summer, I will be working on implementing the external library
appropriately named "Fastest Fourier Transform in the West" version 3
(FFTW3) C and Fortran API in Ruby for this year's Google Summer of Code
(GSoC).</p>

<p>The primary aim of the project is to give SciRuby the capability to
handle signal analysis, processing and synthesis by performing discrete
fast Fourier transform operations on NMatrix objects.</p>

<p>After some investigation during the preparation stages of GSoC, it was
determined that implementing FFTW3 is more desirable than starting from
scratch in pure Ruby because the FFTW3 API is already extensively used,
developed, and optimised far beyond what would be achievable in just
three months. So, putting FFTW3 in the driving seat allows the SciRuby
project to take advantage of the good work of the FFTW3 developers by
bringing it to Ruby.</p>

<p>Putting NMatrix to the test with FFTW3 should give users the
opportunity to test drive NMatrix &mdash; and SciRuby's NMatrix developers a
chance to root out bugs.</p>

<p>Since a gem called ruby-fftw3 already existed to perform FFTW3 operations
on NArray objects, I forked that repository as a starting point. <a href="https://github.com/thisMagpie/fftw">Things are progressing on my Github fork</a> right now.</p>

<p>My mentor for this project is Colin Fuller who is an exceptionally
talented programmer &mdash; and he really knows his git too. He has been a
great help as I adapt to the learning curve of working in C and
Ruby (languages which I am less familiar with than say, Java or
JavaScript).</p>

<p>As I work, I intend to share useful gems of information I gather. Those, in addition to my weekly project updates, will appear right here in this blog so others can hopefully benefit.</p>

<p>I have already posted a few useful bits and bobs on
<a href="http://thismagpie.com">thismagpie.com</a> which relate to my work so far.
I hope to add those to the SciRuby blog, too, provided
the readers are interested in that and time permits. Of course, readers here can feel free to have a browse
of the keywords <a href="http://thismagpie.com/keyword/sciruby">sciruby</a>,
<a href="http://thismagpie.com/keyword/ruby">ruby</a> and
<a href="http://thismagpie.com/keyword/git">git</a> on there for the time being.
I sometimes add posts, manuals and tutorials from external sites where I
find useful ones on the web too, so watch out for these too.</p>

<p>Please, feel free to watch or follow along as the project comes together
and those inclined are welcome to share constructive comments and advice
or raise bugs on the fftw3 issue tracker. Input about my work is very
welcome as the project progresses. This gem is being written for the
community, after all!</p>

<p>You can find me on Twitter (Facebook) or GitHub under the username @thisMagpie.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the GSoC 2014 D3 Project]]></title>
    <link href="http://sciruby.com/blog/2014/06/02/introducing-gsoc-2014-the-d3-project/"/>
    <updated>2014-06-02T14:00:00-04:00</updated>
    <id>http://sciruby.com/blog/2014/06/02/introducing-gsoc-2014-the-d3-project</id>
    <content type="html"><![CDATA[<p>Hello. I am Naoki, one of four Google Summer of Code (GSoC) 2014
students in SciRuby. Let me introduce my project. The goal of the GSoC
2014 D3 Project is to create a new plotting library for
SciRuby. <a href="http://d3js.org/">D3.js</a> is the most suitable JavaScript
library to achieve this goal.</p>

<p>There are several non-Ruby plotting software libraries in the wild,
like ggplot, matplotlib, and ggplot2. Actually, SciRuby already has
its own plotting libraries named
<a href="https://github.com/SciRuby/plotrb">Plotrb</a> and
<a href="https://github.com/SciRuby/rubyvis">Rubyvis</a>. The main feature of my
project compared with those software packages is <em>interactivity</em>.
Interactivity has various meanings here: interactivity when generating
plots, interactivity when viewing them, and server&ndash;client
interactivity. My project includes all of those.</p>

<p>My project can be divided into two components, one JavaScript and the
other Ruby. JavaScript serves as a back-end, and Ruby as a
front-end. I'm currently working on the former part. Have a look at a
few examples I've assembled:</p>

<ul>
<li><a href="http://bl.ocks.org/domitry/b8785f02f36deef567ce">Multiple panes</a></li>
<li><a href="http://bl.ocks.org/domitry/2f53781449025f772676">Bar chart</a></li>
<li><a href="http://bl.ocks.org/domitry/e9a914b78f3a576ed3bb">Line</a></li>
<li><a href="http://bl.ocks.org/domitry/308e27d8d12c1374e61f">Scatter</a></li>
<li><a href="http://bl.ocks.org/domitry/f215d5ff3bd3f5fec2ad">Another theme</a></li>
</ul>


<p>This project involves a number of challenges, but I believe it to be
achievable during this Summer of Code. Thank you for reading!</p>
]]></content>
  </entry>
  
</feed>
